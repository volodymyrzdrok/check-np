{"version":3,"file":"static/js/157.a273f3fd.chunk.js","mappings":"yIAiBA,IAdwB,WACtB,OACE,SAAC,IAAD,CACEA,GAAI,CACFC,EAAG,GAFP,UAKE,SAAC,IAAD,CAAYD,GAAI,CAAEE,SAAU,OAAQC,MAAO,QAA3C,kKAKL,C,0KCkDD,EA3DoB,WAClB,OAAgCC,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAQC,EAAAA,EAAAA,MAARD,IAEFE,EAAiB,mCAAG,WAAMF,GAAN,8EACxBD,GAAa,GACbF,EAAY,MAFY,mBAIHM,EAAAA,EAAAA,GAAoBH,GAJjB,WAIhBI,EAJgB,QAKZC,QALY,uBAMpBC,QAAQC,IAAI,mCANQ,6BASU,MAA5BH,EAAKI,KAAK,GAAGC,WATK,wBAUpBH,QAAQC,IAAI,+BAVQ,2BActBD,QAAQC,IAAI,qBACZV,EAAYO,EAAKI,KAAK,IAfA,kDAiBtBF,QAAQC,IAAR,MAjBsB,yBAmBtBR,GAAa,GAnBS,6EAAH,sDA4BvB,OALAW,EAAAA,EAAAA,YAAU,WACRb,EAAY,MACZK,EAAkBF,EACnB,GAAE,CAACA,KAGF,8BACGF,GACC,SAACa,EAAA,EAAD,IACEf,GACF,4BACE,wBACE,qEAEF,uBAAIA,EAASgB,UACb,wBACE,mGAEF,uBAAIhB,EAASiB,mBACb,wBACE,4EAEF,uBAAIjB,EAASkB,gCAGf,SAACC,EAAA,EAAD,KAIP,ECpDD,EARiB,WACf,OACE,+BACE,SAAC,EAAD,KAGL,C,mICNM,SAAeZ,EAAtB,+CAAO,OAAP,oBAAO,WAAmCa,GAAnC,gGAEoBC,EAAAA,EAAAA,KAAWC,EAAAA,GAAQ,CACxCC,OAAQC,EAAAA,GACRC,UAAW,mBACXC,aAAc,qBACdC,iBAAkB,CAChBC,UAAW,CACT,CACEC,eAAgBT,EAChBU,MAAO,oBAVZ,cAEGC,EAFH,yBAeIA,EAASnB,MAfb,gCAiBHF,QAAQsB,MAAR,MAjBG,gFAqBA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAqCC,GAArC,kGAEoBb,EAAAA,EAAAA,KAAWC,EAAAA,GAAQ,CACxCC,OAAQC,EAAAA,GACRC,UAAW,UACXC,aAAc,gBACdC,iBAAkB,CAChBQ,SAAUD,EAEVE,KAAM,IACNC,MAAO,KACPC,SAAU,QAXX,uBAEK1B,EAFL,EAEKA,KAFL,kBAcIA,GAdJ,gCAgBHF,QAAQsB,MAAR,MAhBG,gF,2BCtBDO,GAAMC,E,QAAAA,KAoBZ,K","sources":["components/NotificationDoc/NotificationDoc.js","components/PackageInfo/PackageInfo.js","pages/PackInfo/PackInfo.js","services/apiService.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import { Typography } from '@mui/material';\nimport { Box } from '@mui/system';\n\nconst NotificationDoc = () => {\n  return (\n    <Box\n      sx={{\n        p: 2,\n      }}\n    >\n      <Typography sx={{ fontSize: '20px', color: 'grey' }}>\n        Внесіть коректний номер ТТН\n      </Typography>\n    </Box>\n  );\n};\n\nexport default NotificationDoc;\n","import Loader from 'components/Loader/Loader';\nimport NotificationDoc from 'components/NotificationDoc/NotificationDoc';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchPackageDetails } from 'services/apiService';\n\nconst PackageInfo = () => {\n  const [packInfo, setPackInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { ttn } = useParams();\n\n  const getPackageDetails = async ttn => {\n    setIsLoading(true);\n    setPackInfo(null);\n    try {\n      const resp = await fetchPackageDetails(ttn);\n      if (!resp.success) {\n        console.log('Document number is not correct!');\n        return;\n      }\n      if (resp.data[0].StatusCode === '3') {\n        console.log('Documents number not found!');\n        return;\n      }\n\n      console.log(' everything is ok');\n      setPackInfo(resp.data[0]);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setPackInfo(null);\n    getPackageDetails(ttn);\n  }, [ttn]);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : packInfo ? (\n        <div>\n          <b>\n            <p>Статус: </p>\n          </b>\n          <p>{packInfo.Status}</p>\n          <b>\n            <p>Відправлено: </p>\n          </b>\n          <p>{packInfo.WarehouseSender}</p>\n          <b>\n            <p>Oтримано: </p>\n          </b>\n          <p>{packInfo.WarehouseRecipientAddress}</p>\n        </div>\n      ) : (\n        <NotificationDoc />\n      )}\n    </>\n  );\n};\n\nexport default PackageInfo;\n","import PackageInfo from 'components/PackageInfo/PackageInfo';\nimport React from 'react';\n\nconst PackInfo = () => {\n  return (\n    <>\n      <PackageInfo />\n    </>\n  );\n};\n\nexport default PackInfo;\n","import axios from 'axios';\nimport { KEY_API, NP_URL } from '../utils/constants';\n\nexport async function fetchPackageDetails(ttn_number) {\n  try {\n    const response = await axios.post(NP_URL, {\n      apiKey: KEY_API,\n      modelName: 'TrackingDocument',\n      calledMethod: 'getStatusDocuments',\n      methodProperties: {\n        Documents: [\n          {\n            DocumentNumber: ttn_number,\n            Phone: '380600000000',\n          },\n        ],\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function fetchDepartamentsList(city_name) {\n  try {\n    const { data } = await axios.post(NP_URL, {\n      apiKey: KEY_API,\n      modelName: 'Address',\n      calledMethod: 'getWarehouses',\n      methodProperties: {\n        CityName: city_name,\n\n        Page: '1',\n        Limit: '50',\n        Language: 'UA',\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import PropTypes from 'prop-types';\nimport createBox from '../createBox';\nconst Box = createBox();\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["sx","p","fontSize","color","useState","packInfo","setPackInfo","isLoading","setIsLoading","ttn","useParams","getPackageDetails","fetchPackageDetails","resp","success","console","log","data","StatusCode","useEffect","Loader","Status","WarehouseSender","WarehouseRecipientAddress","NotificationDoc","ttn_number","axios","NP_URL","apiKey","KEY_API","modelName","calledMethod","methodProperties","Documents","DocumentNumber","Phone","response","error","fetchDepartamentsList","city_name","CityName","Page","Limit","Language","Box","createBox"],"sourceRoot":""}